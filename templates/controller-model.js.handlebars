(function() {

  'use strict';

  var app = angular.module('nova'),
      controllerId = '{{entityCamelCase}}ModelController';

  app.controller(controllerId, ['$scope', '$state', '$stateParams', 'config', 'common', 'events', '{{entityCamelCase}}States', '{{entityCamelCase}}ModelFactory', controller]);

    function controller($scope, $state, $stateParams, config, common, events, {{entityCamelCase}}States, {{entityCamelCase}}ModelFactory) {

    // initialize controller
    _initialize();

    ///////////////////////////////////////////////
    // Event handlers                            //
    ///////////////////////////////////////////////


    ///////////////////////////////////////////////
    // Scope Methods                             //
    ///////////////////////////////////////////////

    /**
    * Save {{entityHumanized}} changes
    *
    * @method save
    **/
    $scope.save = function() {
      $scope.{{entityCamelCase}}Model.save().then(function() {
        $state.transitionTo({{entityCamelCase}}States.COLLECTION);
      });
    }

    /**
    * Cancel {{entityHumanized}} changes
    *
    * @method cancel
    **/
    $scope.cancel = function() {
      modalFactory.open('Discard {{entityHumanized}} changes', '', ' Are you sure you want to discard {{entityHumanized}} changes?')
        .then(function() {
          $state.transitionTo({{entityCamelCase}}States.COLLECTION);
        });
    }

    ///////////////////////////////////////////////
    // Private Methods                           //
    ///////////////////////////////////////////////

    /**
    * Initialize controller
    *
    * @private
    * @method _initialize
    **/
    function _initialize() {
      _prepareScope();
      common.wait([_resolve{{entity}}()], controllerId);
    }
    /**
    * Prepare initial values for the controller's scope
    *
    * @private
    * @method _prepareScope
    **/
    function _prepareScope() {
    }
    /**
    * This function will return the right {{entityHumanized}} instance depending on which state we are:
    * {{entityPlural}}.new or {{entityPlural}}.edit
    *
    * @private
    * @method _resolve{{entity}}
    **/
    function _resolve{{entity}}() {
      // depending on the state
      var promise, Model = {{entityCamelCase}}ModelFactory.{{entity}}Model;
      var state = $state.current;
      if (state.name === {{entityCamelCase}}States.NEW) {
        promise = new Model();
      } else if (state.name === {{entityCamelCase}}States.EDIT) {
        promise = new Model($stateParams.id);
      }

      promise.then(function({{entityCamelCase}}Model) {
        $scope.{{entityCamelCase}}Model = {{entityCamelCase}}Model;
      });

      return promise;
    }
  }
})();
